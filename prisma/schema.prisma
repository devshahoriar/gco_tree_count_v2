generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  role          String    @default("admin")
  permissions   String?
  active        Boolean   @default(true)
  createdAt     DateTime
  updatedAt     DateTime
  Session       Session[]
  Account       Account[]
  Ot4oc         Ot4oc[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Division {
  id    Int     @id @default(autoincrement())
  name  String
  Zilla Zilla[]
  Ot4oc Ot4oc[]
}

model Zilla {
  id         Int        @id @default(autoincrement())
  name       String
  divisionId Int
  division   Division   @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  Upazilla   Upazilla[]
  Ot4oc      Ot4oc[]
}

model Upazilla {
  id         Int          @id @default(autoincrement())
  name       String
  zillaId    Int
  zilla      Zilla        @relation(fields: [zillaId], references: [id], onDelete: Cascade)
  Union      Union[]
  PostOffice PostOffice[]

  Ot4oc Ot4oc[]
}

model Union {
  id         Int      @id @default(autoincrement())
  name       String
  upazillaId Int
  upazilla   Upazilla @relation(fields: [upazillaId], references: [id], onDelete: Cascade)
  Ot4oc      Ot4oc[]
}

model PostOffice {
  id        Int      @id @default(autoincrement())
  name      String
  postCode  String
  upZillaId Int
  upZilla   Upazilla @relation(fields: [upZillaId], references: [id], onDelete: Cascade)

  Ot4oc Ot4oc[]
}

model TreeType {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model File {
  id        Int      @id @default(autoincrement())
  url       String
  fileId    String   @unique
  fileType  String?
  createdAt DateTime
}

model Ot4oc {
  id Int @id @default(autoincrement())

  childName           String?
  childBirthDate      DateTime?
  childGender         String?
  fatherName          String?
  fatherBirthDate     DateTime?
  fatherNid           String?
  fatherJob           String?
  fatherEdu           String?
  motherName          String?
  motherBirthDate     DateTime?
  motherNid           String?
  motherJob           String?
  motherEdu           String?
  religion            String?
  deliveryInfo        String?
  deliveryChildHealth String?
  familyIncome        String?
  village             String?

  postId     Int?
  postOffice PostOffice? @relation(fields: [postId], references: [id])

  upZillaId Int?
  upZilla   Upazilla? @relation(fields: [upZillaId], references: [id])

  zillaId Int?
  zilla   Zilla? @relation(fields: [zillaId], references: [id])

  divisionId Int?
  division   Division? @relation(fields: [divisionId], references: [id])

  unionId Int?
  union   Union? @relation(fields: [unionId], references: [id])

  wordNo                      Int?
  phone                     String?
  email                     String?
  treePlantDate             DateTime?
  tree_count                String?
  treeType                  String?
  whoPlanName               String?
  bornWeek                  String?
  bornWeight                String?
  thChild                   String?
  childBornPlace            String?
  motherContractExpart      String?
  howManyTimeContractExpart String?
  isMotherFreedomToGoExpart String?
  motherSeriousSick         String?
  preventCozToGoExpert      String?
  whereIsMotherWhenPregnant String?
  childPhoto                String?
  step                      String?
  deleted                   Boolean   @default(false)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
